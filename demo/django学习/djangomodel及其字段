前言
Django 模型是与数据库相关的，与数据库相关的代码一般写在 models.py 中，Django 支持 sqlite3, MySQL, PostgreSQL等数据库
只需要在settings.py中配置即可，不用更改models.py中的代码。当我们的web项目需要新增一张表和字段内容时，需要在models.py里面写相关内容。

配置数据库
django配置mysql数据库教程参考前面一篇https://www.cnblogs.com/yoyoketang/p/9997520.html

需先安装mysql数据库驱动 pip install mysqlclient==1.3.10

settings.py 文件中找到 DATABASES 配置项, django默认连接sqllite。ENGINE：是指连接数据库驱动的名称,有以下几种情况：

django.db.backends.postgresql 连接 PostgreSQL
django.db.backends.mysql 连接 mysql
django.db.backends.sqlite3 连接 sqlite
django.db.backends.oracle 连接 oracle
这里我们连接mysql需要账户密码，也就是之前安装mysql的root用户名，和自己设置的密码，NAME是数据库的名称，连接配置如下：

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 或者使用 mysql.connector.django
        'NAME': 'test',
        'USER': 'root',
        'PASSWORD': 'yoyo',
        'HOST':'localhost',
        'PORT':'3306',
    }
}
django里面无法创建数据库，数据库名称test需要手动创建，只能创建表名

创建表
编辑models.py文件，比如我想新增一张person表，有2个字段：name、age。name是字符串类型，age是int类型

希望创建的表和字段效果设计如下（用navicat工具查看的）



那么对应models.py文件代码为

# models.py

from django.db import models

# Create your models here.

# 我们新建了一个Person类，继承自models.Model,
class Person(models.Model):
    name = models.CharField(max_length=30)
    age = models.IntegerField()

接着打开cmd,cd到django的根目录，执行2个指令

python manage.py makemigrations
python manage.py migrate

D:\web_djo\helloworld>python manage.py makemigrations
Migrations for 'hello':
  hello\migrations\0006_person.py
    - Create model Person

D:\web_djo\helloworld>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, hello, sessions
Running migrations:
  Applying hello.0006_person... OK
makemigrations和migrate
makemigrations 这一步执行后，会在当前app目录下生成一个migrations文件夹，该文件夹的内容就是数据库要执行的内容



migrate就是执行之前生成的migrations文件，这一步才是操作数据库的一步，执行完成后，数据库里面会新增一张表hello_person



新建的表名是app名称_class类名称的组合，自动转化成小写，也就是hello_person

name = models.CharField(max_length=30) 这个表示name字段是字符串类型（CharField），最大长度是30个字符串

age = models.IntegerField() 这个表示age字段是int类型（CharField）

id是默认的主键

字段类型
django的models里面字段类型除了上面的常用的 models.CharField和models.IntegerField，还有更多的类型

1、models.AutoField　　自增列= int(11)
　　如果没有的话，默认会生成一个名称为 id 的列，如果要显示的自定义一个自增列，必须将给列设置为主键 primary_key=True。
2、models.CharField　　字符串字段
　　必须 max_length 参数
3、models.BooleanField　　布尔类型=tinyint(1)
　　不能为空，Blank=True
4、models.ComaSeparatedIntegerField　　用逗号分割的数字=varchar
　　继承CharField，所以必须 max_lenght 参数
5、models.DateField　　日期类型 date
　　对于参数，auto_now =True则每次更新都会更新这个时间；auto_now_add 则只是第一次创建添加，之后的更新不再改变。
6、models.DateTimeField　　日期类型 datetime
　　同DateField的参数
7、models.Decimal　　十进制小数类型= decimal
　　必须指定整数位max_digits和小数位decimal_places
8、models.EmailField　　字符串类型（正则表达式邮箱）=varchar
　　对字符串进行正则表达式
9、models.FloatField　　浮点类型= double
10、models.IntegerField　　整形
11、models.BigIntegerField　　长整形
　　integer_field_ranges ={
　　　　'SmallIntegerField'😦-32768,32767),
　　　　'IntegerField'😦-2147483648,2147483647),
　　　　'BigIntegerField'😦-9223372036854775808,9223372036854775807),
　　　　'PositiveSmallIntegerField':(0,32767),
　　　　'PositiveIntegerField':(0,2147483647),
　　}
12、models.IPAddressField　　字符串类型（ip4正则表达式）
13、models.GenericIPAddressField　　字符串类型（ip4和ip6是可选的）
　　参数protocol可以是：both、ipv4、ipv6
　　验证时，会根据设置报错
14、models.NullBooleanField　　允许为空的布尔类型
15、models.PositiveIntegerFiel　　正Integer
16、models.PositiveSmallIntegerField　　正smallInteger
17、models.SlugField　　减号、下划线、字母、数字
18、models.SmallIntegerField　　数字
　　数据库中的字段有：tinyint、smallint、int、bigint
19、models.TextField　　字符串=longtext
20、models.TimeField　　时间 HH:MM[:ss[.uuuuuu]]
21、models.URLField　　字符串，地址正则表达式
22、models.BinaryField　　二进制
23、models.ImageField图片
24、models.FilePathField文件

字段参数
对应的字段参数如下：

1、null=True
　　数据库中字段是否可以为空
2、blank=True
　　django的 Admin 中添加数据时是否可允许空值
3、primary_key = False
　　主键，对AutoField设置主键后，就会代替原来的自增 id 列
4、auto_now 和 auto_now_add
　　auto_now 自动创建---无论添加或修改，都是当前操作的时间
　　auto_now_add 自动创建---永远是创建时的时间
5、choices
GENDER_CHOICE = (
(u'M', u'Male'),
(u'F', u'Female'),
)
gender = models.CharField(max_length=2,choices = GENDER_CHOICE)
6、max_length
7、default　　默认值
8、verbose_name　　Admin中字段的显示名称
9、name|db_column　　数据库中的字段名称
10、unique=True　　不允许重复
11、db_index = True　　数据库索引
12、editable=True　　在Admin里是否可编辑
13、error_messages=None　　错误提示
14、auto_created=False　　自动创建
15、help_text　　在Admin中提示帮助信息
16、validators=[]
17、upload-to


关于查询
通过objects这个模型管理器的all()获得所有数据行，相当于SQL中的SELECT * FROM
a = User.objects.all()

filter相当于SQL中的WHERE，可设置条件过滤结果
b = User.objects.filter(id=1)

获取单个对象
c = User.objects.get(id=1)

限制返回的数据 相当于 SQL 中的 OFFSET 0 LIMIT 2;
d = User.objects.order_by('name')[0:2]

查询结果排序
e = User.objects.order_by("id")

上面的方法可以连着使用
f = User.objects.filter(name="runoob").order_by("id")